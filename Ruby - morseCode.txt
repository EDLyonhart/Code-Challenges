
def decodeMorse(morseCode)  
  morseChars = { "A" => ".-", "B" => "-...", "C" => "-.-.", "D" => "-..", "E" => ".", "F" => "..-.", "G" => "--.", "H" => "....", "I" => "..", "J" => ".---", "K" => "-.-", "L" => ".-..", "M" => "--", "N" => "-.", "O" => "---", "P" => ".--.", "Q" => "--.-", "R" => ".-.", "S" => "...", "T" => "-", "U" => "..-", "V" => "...-", "W" => ".--", "X" => "-..-", "Y" => "-.--", "Z" => "--..", "1" => ".----", "2" => "..---", "3" => "...--", "4" => "....-", "5" => ".....", "6" => "-....", "7" => "--...", "8" => "---..", "9" => "----.", "0" => "-----" }

  morseCode.split('   ').map { |word| word.split(' ').map{ |letter| morseChars.key(letter) }.join }.join(' ')

end

decodeMorse(" .... . -.--   .--- ..- -.. .")
 => “HEY JUDE”

- - - - - solution they wanted - - - - -

they essentially provided the ‘MORSE_CODE’ library and didn’t want it written out for each solution.



def decodeMorse(morseCode)  
  morseCode.strip.split('   ').map { |word| word.split(' ').map{ |letter| MORSE_CODE.values_at(letter) }.join }.join(' ')
end